#ifndef _NM_MODULE_H_
#define _NM_MODULE_H_


#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

#include <stdint.h>

#include <arpa/inet.h>			// needed for htons()

#define NM_MON_PERIOD_SEC		1
#define NM_STAT_GET_PERIOD_SEC		600
#define NM_STAT_SEND_PERIOD_SEC		60
#define NM_HOPSA_PERIOD_SEC		10

#define NM_CNT_ERR	-1
#define NM_CNT_NONE	-2
#define NM_GET_CNT64(VAL) (VAL & ((((uint64_t)1) << 63) - 1))
#define NM_GET_CNT32(VAL) (VAL & ((((uint32_t)1) << 31) - 1))


enum {
	MON_BAD_CNF = 110,	// hardware status (0-2)
	BAD_CNF_INFO = 111,	// hardware status message
	HW_FPGA_STATUS = 112,	// FPGA flash status

	MON_SYS_TEMP = 1210,	// system temperature, C
	MON_CPU_TEMP = 1010,	// CPU1-x temp, C
	MON_CPU_FREQ = 1018,	// Current CPUs frequency
	MON_CPU_VCORE = 1030,	// CPU1-x, Volt*100
	MON_V_1_1 = 1239,	// system 1.1V, Volt*100
	MON_V_1_8 = 1240,	// system 1.8V, Volt*100
	MON_V_3_3 = 1230,	// system 3.3V, Volt*100
	MON_V_5 = 1231,		// system 5V, Volt*100
	MON_V_12 = 1232,	// system 12V, Volt*100
	MON_V_N12 = 1241,	// system -12V, Volt*100
	MON_V_1_2 = 1233,	// system 1.2V, Volt*100
	MON_V_1_4 = 1234,	// system 1.4V, Volt*100
	MON_V_1_5 = 1235,	// system 1.5V, Volt*100
	MON_V_3_3VSB = 1236,	// system 3.3V Standby, Volt*100
	MON_V_5VSB = 1237,	// system 5V Standby, Volt*100
	MON_V_BAT = 1238,	// system battery, Volt*100
	MON_CPU_FAN = 1020,	// CPU1-x FAN, RPM
	MON_SYS_FAN = 1220,	// Chassis1-x FAN, RPM
	MON_CHASSIS_FAN = 1225,	// Chasis fan, RPM
	MON_V_DIMM = 1130,	// DIMM, Volt*100
	MON_MEM_TEMP = 1211,	// Memory module temperature

	MON_PS_INP_VOLT = 1300,	//err = -1
	MON_PS_INP_WATTS = 1303,//err = -1
	MON_PS_OUTP_VOLT = 1310,//err = -1
	MON_PS_OUTP_LOAD = 1314,// % * 256, err = -1
	MON_PS_TEMP = 1320,	// Temp * 100
	MON_PS_FAN = 1330,	//PSU Fan, RPM

	MON_CPU_USAGE_USER = 1050,
	MON_CPU_USAGE_NICE = 1051,
	MON_CPU_USAGE_SYSTEM = 1052,
	MON_CPU_USAGE_IDLE = 1053,
	MON_CPU_USAGE_IOWAIT = 1054,
	MON_CPU_USAGE_IRQ = 1055,
	MON_CPU_USAGE_SIRQ = 1056,
	MON_CPU_MCE_TOTAL = 1080,

	MON_MEMORY_TOTAL = 1250,
	MON_MEMORY_USED = 1251,
	MON_MEMORY_SWAP_TOTAL = 1252,
	MON_MEMORY_SWAP_FREE = 1253,
	MON_MEMORY_TOTAL_FREE = 1254,
	MON_MEMORY_FREE = 1255,
	MON_MEMORY_BUFFERS = 1256,
	MON_MEMORY_CACHED = 1257,
	MON_MEMORY_MLOCKED = 1258,

	MON_VM_PGPGIN = 1260,
	MON_VM_PGPGOUT = 1261,
	MON_VM_PSWPIN = 1262,
	MON_VM_PSWPOUT = 1263,

	MON_HUGETLB_TOTAL = 1270,
	MON_HUGETLB_FREE = 1271,
	MON_HUGETLB_RESV = 1272,

        MON_AVENRUN_1M = 1290,
        MON_AVENRUN_5M = 1291,
        MON_AVENRUN_15M = 1292,

	MON_RX_PACKETS = 2000,
	MON_TX_PACKETS = 2001,
	MON_RX_BYTES = 2002,
	MON_TX_BYTES = 2003,
	MON_RX_ERRORS = 2004,
	MON_TX_ERRORS = 2005,
	MON_RX_DROPPED = 2006,
	MON_TX_DROPPED = 2007,
	MON_MULTICAST = 2008,
	MON_COLLISIONS = 2009,

	MON_FS_BYTES_USAGE = 2100,
	MON_FS_INODES_USAGE =2101,

	MON_IO_BPS_READ = 2160,
	MON_IO_BPS_WRITE = 2161,
	MON_IO_IOPS_READ = 2162,
	MON_IO_IOPS_WRITE = 2163,

	MON_IB_P_SYMBOL_ERR = 2200,
	MON_IB_P_VL15_DROPPED = 2201,
	MON_IB_P_EXCESSIVE_BUF_OVERRUN = 2202,
	MON_IB_P_LINK_DOWNED = 2203,
	MON_IB_P_LINK_ERR_RECOVER = 2204,
	MON_IB_P_LOCAL_LINK_INTEGRITY_ERR = 2205,
	MON_IB_P_RECV_CONSRTAINT_ERR = 2206,
	MON_IB_P_XMIT_CONSRTAINT_ERR = 2207,
	MON_IB_P_RECV_DATA = 2208,
	MON_IB_P_XMIT_DATA = 2209,
	MON_IB_P_RECV_PACKETS = 2210,
	MON_IB_P_XMIT_PACKETS = 2211,
	MON_IB_P_RECV_ERR = 2212,
	MON_IB_P_RECV_REM_PHYS_ERR  = 2213,
	MON_IB_P_RECV_SW_RELAY_ERR = 2214,
	MON_IB_P_XMIT_DISCARDS = 2215,
	MON_IB_P_XMIT_WAIT = 2216,

	MON_SMART_RAW_READ_ERROR_RATE = 2561,
	MON_SMART_REALLOCATED_SECTOR_COUNT = 2565,
	MON_SMART_SEEK_ERROR_RATE = 2567,
	MON_SMART_SPIN_RETRY_COUNT = 2570,
	MON_SMART_TEMPERATURE = 2754,

	MON_GPU_NV_FAN_SPEED = 3001,
	MON_GPU_NV_TEMP_GPU = 3002,
	MON_GPU_NV_CLOCK_GRAPHICS = 3003,
	MON_GPU_NV_CLOCK_SM = 3004,
	MON_GPU_NV_CLOCK_MEM = 3005,
	MON_GPU_NV_POWER_USAGE = 3006,
	MON_GPU_NV_MEM_FREE = 3007,
	MON_GPU_NV_MEM_USED = 3008,
	MON_GPU_NV_UTIL_GPU = 3009,
	MON_GPU_NV_UTIL_MEM = 3010,
	MON_GPU_NV_ECC_S_V_TOTAL = 3011,
	MON_GPU_NV_ECC_S_A_TOTAL = 3012,
	MON_GPU_NV_ECC_D_V_TOTAL = 3013,
	MON_GPU_NV_ECC_D_A_TOTAL = 3014,
	MON_GPU_NV_ECC_S_V_L1CACHE = 3015,
	MON_GPU_NV_ECC_S_V_L2CACHE = 3016,
	MON_GPU_NV_ECC_S_V_DEVMEM = 3017,
	MON_GPU_NV_ECC_S_V_REGFILE = 3018,
	MON_GPU_NV_ECC_S_A_L1CACHE = 3019,
	MON_GPU_NV_ECC_S_A_L2CACHE = 3020,
	MON_GPU_NV_ECC_S_A_DEVMEM = 3021,
	MON_GPU_NV_ECC_S_A_REGFILE = 3022,
	MON_GPU_NV_ECC_D_V_L1CACHE = 3023,
	MON_GPU_NV_ECC_D_V_L2CACHE = 3024,
	MON_GPU_NV_ECC_D_V_DEVMEM = 3025,
	MON_GPU_NV_ECC_D_V_REGFILE = 3026,
	MON_GPU_NV_ECC_D_A_L1CACHE = 3027,
	MON_GPU_NV_ECC_D_A_L2CACHE = 3028,
	MON_GPU_NV_ECC_D_A_DEVMEM = 3029,
	MON_GPU_NV_ECC_D_A_REGFILE = 3030,

	TPCNT_SW_CPU_CLOCK = 32768,
	TPCNT_SW_TASK_CLOCK = 32770,
	TPCNT_SW_PFLT = 32772,
	TPCNT_SW_CTX_SW = 32774,
	TPCNT_SW_CPU_MIG = 32776,
	TPCNT_SW_PFLT_MIN = 32778,
	TPCNT_SW_PFLT_MAJ = 32780,

	CPU_PERF_FIXED01 = 40960,
	CPU_PERF_FIXED02 = 40962,
	CPU_PERF_FIXED03 = 40964,

	CPU_PERF_COUNTER01 = 41216,
	CPU_PERF_COUNTER02 = 41218,
	CPU_PERF_COUNTER03 = 41220,
	CPU_PERF_COUNTER04 = 41222,
	CPU_PERF_COUNTER05 = 41224,
	CPU_PERF_COUNTER06 = 41226,
	CPU_PERF_COUNTER07 = 41228,
	CPU_PERF_COUNTER08 = 41230,
};


#define BUFSIZE	sysconf(_SC_PAGESIZE)


struct nm_module_bufdesc_t {
	volatile int		buf_shmid;
	volatile size_t		buf_size;
	volatile uint32_t	buf_flags;
};

#define NM_BUF_SHMID_CHANGED	1


/************ protocol-related ************/
struct nm_tlv_hdr_t {
	uint16_t	len;
	uint16_t	type;
} __attribute__((packed));


#define NM_MONTYPE(T, L)	((struct nm_tlv_hdr_t) {htons(L), htons(T)})

/* Size of one dynamic element == header size + size of one element * count of elemens */
#define NM_DYNELEMLEN(EL, C)	(sizeof(struct nm_tlv_hdr_t) + (EL) * (C))


#define NM_ELADDR(BASEPADDR, T)		((T *)(BASEPADDR + sizeof(struct nm_tlv_hdr_t)))

/* THIS MACRO CAN BE USED _ONLY_ IF ALL PARAMS HAS IDENTIAL SIZE */
#define NM_PADDR(BASEADDR, DEL, PI)	((uint8_t *) ((BASEADDR) + (DEL) * (PI)))

#define NM_GROUPADDR(POINTER, ELM_LEN, ELM_CNT, S_IDX)		NM_PADDR(POINTER, NM_DYNELEMLEN(ELM_LEN, ELM_CNT), S_IDX)

#define NM_VECTADDR(PTR, S_ELM_LEN, S_ELM_CNT, IDX, S_TYPE)	NM_ELADDR(NM_PADDR(PTR, NM_DYNELEMLEN(S_ELM_LEN, S_ELM_CNT), IDX), S_TYPE)


#endif	/* _NM_MODULE_H_ */

